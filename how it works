What is a Pointer?
Imagine you have a big house with lots of rooms. Each room has a unique 
address (like 101, 102, etc.), and in each room, there’s a box holding
 something, like a toy or a game. Now, a pointer is like a note that
  tells you the address of a particular room where a box is located.

In programming, instead of toys, you store numbers, letters, and
 other values. A pointer helps you find exactly where those values 
 are saved in your computer’s memory (like the rooms in your house).

How Pointers Work
Getting the Address: A pointer doesn’t hold the actual value, but it 
knows where to find it. So if you have a number, let’s say 5, stored
 in a specific room, the pointer will hold the room's address.

Example: int *pointer = &number;
Here, pointer has the address of number, so it can tell you exactly where 5 is in memory.
Using the Pointer (Dereferencing): When you want to look inside the
 room and see what’s in the box, you can use the pointer. This process is called dereferencing.

Example: *pointer shows you the value stored in the room, not just the address.
Modifying Values with Pointers
Let’s say your pointer points to a room with a box that has the number
 5 inside. If you want to change the number to 10, you don’t have to
  know the room’s address! You can just tell the pointer to change 
  whatever’s inside the box it’s pointing to. Now, if you
   open the room, the box will have 10 instead of 5.

Pointer Arithmetic
Now, imagine that instead of one room, you have a row of rooms all next to
 each other, each one with a box inside. This row is called an array in
  programming. If a pointer knows the address of the first room, you can 
  use it to hop from one room to the next by adding 1 to it. This lets you go through each room in order!

In Short:
Pointer = A note with the address of a memory spot.
Dereference = Look inside the memory spot and see what’s there.
Pointer Arithmetic = Move from one memory spot to another, like rooms in a row.
Pointers might sound tricky, but with practice, they’re like
 having a map that makes navigating memory super easy!
