Building simple programs is a great way to get familiar with C’s syntax and
 improve your problem-solving skills. Here’s a breakdown of how you can approach each of these projects.


1. Calculator for Basic Operations
Goal: Create a program that can add, subtract, multiply, or divide two numbers based on user input.
Steps:
Prompt the user to enter two numbers and choose an operation (like +, -, *, /).
Use a switch or if statements to perform the selected operation.
Display the result to the user.
Example Code:
c
#include <stdio.h>

int main() {
    float num1, num2, result;
    char op;

    printf("Enter first number: ");
    scanf("%f", &num1);
    printf("Enter an operator (+, -, *, /): ");
    scanf(" %c", &op);
    printf("Enter second number: ");
    scanf("%f", &num2);

    switch(op) {
        case '+': result = num1 + num2; break;
        case '-': result = num1 - num2; break;
        case '*': result = num1 * num2; break;
        case '/': result = num2 != 0 ? num1 / num2 : 0; break;
        default: printf("Invalid operator.\n"); return 1;
    }
    printf("Result: %.2f\n", result);
    return 0;
}




2. Reverse a String
Goal: Write a program that reverses a string entered by the user.
Steps:
Use scanf or fgets to read a string.
Reverse the string by swapping characters from the start and end, moving inward.
Print the reversed string.
Example Code:
c
#include <stdio.h>
#include <string.h>

void reverse(char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

int main() {
    char str[100];
    printf("Enter a string: ");
    scanf("%s", str);
    reverse(str);
    printf("Reversed string: %s\n", str);
    return 0;
}




3. Sorting Algorithms (Bubble Sort or Selection Sort)
Goal: Sort an array of numbers in ascending order using either bubble sort or selection sort.

Bubble Sort:

Steps:
Go through the list, comparing each pair of elements.
Swap them if they’re in the wrong order.
Repeat until the array is sorted.
Example Code:
c
#include <stdio.h>

void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {5, 3, 8, 4, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubble_sort(arr, n);
    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}




Selection Sort:

Steps:
Find the smallest element in the array and move it to the start.
Repeat for each position in the array until sorted.
Example Code:
c
#include <stdio.h>

void selection_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

int main() {
    int arr[] = {29, 10, 14, 37, 14};
    int n = sizeof(arr) / sizeof(arr[0]);
    selection_sort(arr, n);
    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    return 0;
}




Summary
Each of these projects will let you practice:

Basic input/output with scanf and printf.
Looping with for or while for tasks like reversing a string or sorting.
Understanding basic logic with conditionals, especially in 
the calculator and sorting examples.
Working through these projects helps you get comfortable
 with C programming while giving you useful tools to solve 
 problems! Let me know if you'd like more practice problems or
  need help with any specific parts of these projects.










